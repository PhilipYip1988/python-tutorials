# The Linux Terminal

The Linux Terminal uses the bash programming language by default which is an abbreviation for Bourne Again SHell. bash commands were used to install Mambaforge using a ```.sh``` script. On Linux, the Linux Terminal is commonly used with bash in conjunction with Python. It is worthwhile familarising yourself with bash before getting started with Python, in order to be familar with the Linux Terminal.

## Opening the Terminal

The Terminal can be opened using the Terminal icon on the start screen:

![img_001](./images/img_001.png)

It can also be opened using the ```Ctrl```, ```Alt``` and ```t```. In either case, the Terminal opens in the default location which is ```~```.

The Terminal can also be opened by using the right click context menu in Files and selecting open in Terminal:

![img_002](./images/img_002.png)

The Terminal will open using the File Path of the current folder displayed in Files.

## The Prompt

The current prompt is indicated using a ```$```:

![img_003](./images/img_003.png)

The prefix of the prompt displays the user name ```philip```:

![img_004](./images/img_004.png)

An ```@``` symbol:

![img_005](./images/img_005.png)

The pc name ```pc```:

![img_006](./images/img_006.png)

A single colon ```:``` :

![img_007](./images/img_007.png)

The ```~```, indicates the file path:

![img_008](./images/img_008.png)

The ```$``` indicates a new prompt:

![img_009](./images/img_009.png)

## \~ home

In Linux, the ```~``` represents the Home directory. Files opens by default in Home and selecting Open in Terminal from the right click context menu:

![img_010](./images/img_010.png)

Opens the Terminal in Home ```~```:

![img_011](./images/img_011.png)

This is the default location the Terminal is opened in, if the shortcut key ```Ctrl```, ```Shift``` and ```t``` or the Terminal shortcut is used on the Start Screen.

## ls list

The ```ls``` command is an abbreviation for list and will list all the files and folders in the current directory.

```
ls
```

Notice that all the folders are listed in blue and match the color syntax of the file path:

![img_012](./images/img_012.png)

If the Documents folder is selected, and Open in Terminal is selected:

![img_013](./images/img_013.png)

The location changes to ```~/Documents``` and this is in the blue syntax:

![img_014](./images/img_014.png)

If:

```
ls
```

is used again, this time the two folders and two files will be listed. 

The folders are displayed in the blue syntax and the files are shown in white syntax and include a file extension. 

The file and the folder with a space are shown enclosed in single quotations.

## cd "change directory"

The ```cd``` command is an abbreviation for change directory (folder). It can be used to change to a directory for example by specifying the ```Documents``` subdirectory listed:

```
cd Documents
```

![img_015](./images/img_015.png)

If the command:

```
cd Downloads
```

is now used. The Terminal will try and access a Downloads subdirectory within ```Documents``` which doesn't exist and display a No such File or Directory Error:

![img_016](./images/img_016.png)

To select ```Downloads```, it can be selected by using the file path with respect to Home:

```
cd ~/Downloads
```

![img_017](./images/img_017.png)

It is also possible to use ```.``` to indicate explicitly in the same folder as or ```..``` to go up a directory. Using:

```
cd ..
```

will move the Terminal path to Home ```~``` in this case:

![img_018](./images/img_018.png)

The ```MyNotes``` folder within ```Documents``` can be selected using:

```
cd ~/Documents/MyNotes
```

![img_019](./images/img_019.png)

To get back to Home ```~```, the following can be used:

```
cd ../..
```

![img_020](./images/img_020.png)

The ```My Notes``` folder within within ```Documents``` can be selected using:

```
cd ~/"Documents/MyNotes"
```

![img_038](./images/img_038.png)

Or:

```
cd ~/Documents/"My Notes"
```

![img_039](./images/img_039.png)

## clear

To clear the terminal, the shortcut key ```ctrl``` + ```l``` can be used. This is lower case l for c**l**ear:

![img_021](./images/img_021.png)

The command:

```
clear
```

![img_022](./images/img_022.png)

Also clears the Terminal:

![img_023](./images/img_023.png)

## copy and paste

The shortcut key for copy is ```Ctrl```, ```⇧``` and ```c```:

![img_024](./images/img_024.png)

The shortcut key for paste is ```Ctrl```, ```⇧``` and ```v```:

![img_025](./images/img_025.png)

## close

The shortcut key for closing a currently running process such as an infinite loop is ```Ctrl``` and ```c```.

For example if the following is input:

```
while true; do echo "welcome"; done
```

![img_026](./images/img_026.png)

The Terminal will be hung up in an infinite loop:

![img_027](./images/img_027.png)

Pressing ```Ctrl``` and ```c``` will exit this infinite loop:

![img_028](./images/img_028.png)

## echo

The ```echo``` command is used to print a string to the Terminal. The string is enclosed in quotations. For example:

```
echo "Hello World!"
```

![img_029](./images/img_029.png)

The echo command is more commonly used from within a bash script file which has a ```.sh``` extension.

## bash script.sh

Text Editor can be opened:

![img_030](./images/img_030.png)

The following content can be added:

```
echo "hello world!"
```

The file can be saved by going to file, then save as:

![img_031](./images/img_031.png)

The file can be saved in Documents. Instead of using the file extensions ```.txt```, the file extension ```.sh``` should be used to create a shell script:

![img_032](./images/img_032.png)

Code syntax highlighting will display, now that the file is a ```.sh``` file:

![img_033](./images/img_033.png)

The ```script0.sh``` can be seen in Files under Documents:

![img_034](./images/img_034.png)

This file can be executed in the Terminal by first navigating to the location of the file and then running the script file:

```
cd ~/Documents
bash script0.sh
```

![img_035](./images/img_035.png)

Alternatively the full path of the script file can be specified using:

```
bash ~/Documents/script0.sh
```

![img_036](./images/img_036.png)

If the script file is copied to the ```My Notes``` folder within ```Documents```:

![img_040](./images/img_040.png)

It can be ran using:

```
bash ~/Documents/"My Notes"/script0.sh
```

![img_041](./images/img_041.png)

The ```script0.sh``` within ```Documents``` can be accessed from this location using:

```
bash ../script0.sh
```

![img_042](./images/img_042.png)

## nano Text Editor

```nano``` is a Terminal based text editor. It can be used to modify a file. For example if the directory is changed back to ```Documents```, ```nano``` can be used to open ```script0.sh```:

```
nano ~/Documents/script0.sh
```

![img_043](./images/img_043.png)

The file opens in the ```nano``` Terminal based Text Editor. Navigation around the file can be carried out using the ```←```, ```→```, ```↑```, and ```↓```.

![img_044](./images/img_044.png)

Text can be typed or deleted using ```del```. For example ```hello``` can be replaced with ```hi```. To the bottom display a number of keyboard shortcuts. The ```^``` means the ```Ctrl``` key. ```^x``` is shown for exit, press ```Ctrl``` and ```x``` to exit:

![img_045](./images/img_045.png)

You will be prompted to save. Press ```y``` to proceed:

![img_046](./images/img_046.png)

You will be prompted for a file name, the currently opened file will be input by default. Select ```↵```:

![img_047](./images/img_047.png)

This will exit the ```nano``` Test Editor returning to the Terminal:

![img_048](./images/img_048.png)

The modified script file can be ran using:

```
bash ~/Documents/script0.sh
```

![img_049](./images/img_049.png)

In ```nano``` the shortcut key ```^/``` i.e. ```Ctrl``` + ```/``` can be used to select a location in the file by line and column for example ```1, 8```:

![img_050](./images/img_050.png)
![img_051](./images/img_051.png)

In ```nano``` the shortcut key ```^/``` i.e. ```Ctrl``` + ```/``` can be used to select go to line as before. In this menu other shortcut keys display such as ```^t``` i.e. ```Ctrl``` + ```t``` which can be used to go to text that matches a search query: 

![img_052](./images/img_052.png)
![img_053](./images/img_053.png)

The shortcut key ````^\``` i.e. ```Ctrl``` + ```\``` can be used to perform a replace. You will be prompted for a search term. Input it and press ```↵```:

![img_055](./images/img_055.png)

Then a replace term. Input it and press ```↵```:

![img_056](./images/img_056.png)

Then prompted to replace the instance. Input ```y``` and press ```↵```:

![img_057](./images/img_057.png)

The replacement will now be made:

![img_058](./images/img_058.png)

## touch new file

The command ```touch``` can be used to *touch a directory* i.e. create a file in the directory.

The ```touch``` command requires a file name and extension. For example, the script file ```script1.sh``` can be made using:

```
cd ~/Documents
touch script1.sh
```

![img_059](./images/img_059.png)
![img_060](./images/img_060.png)

This script file can eb opened with ```nano``` using:

```
nano script1.sh
```

![img_061](./images/img_061.png)

An ```echo``` command can be made using:

```
echo "this file was made in the Terminal"
```

Once again the file can be saved by pressing ```Ctrl``` + ```x```:

![img_062](./images/img_062.png)

Then inputting ```y```:

![img_063](./images/img_063.png)

And inputting ```↵``` to save the file using the existing file name:

![img_064](./images/img_064.png)

The script file can be ran using:

```
bash script1.sh
```

![img_065](./images/img_065.png)

The file icon for the ```script1.sh``` only updates to a script file icon once its got some content in the file.

![img_066](./images/img_066.png)

Notice the similarity of the commands used above:

```
touch script1.sh
nano script1.sh
bash script1.sh

```

## rm remove file

The ```rm``` command may be used to remove a file.

![img_067](./images/img_067.png)

For example the file ```NewDocument.txt``` can be removed by changing the directory to ```Documents``` and using:

```
cd ~/Documents
rm NewDocument.txt
```
![img_068](./images/img_068.png)

The file is now removed as seen in Files:

![img_069](./images/img_069.png)

Once again, to move a file with a space in the file names, quotations need to be used:

```
rm "New Document.txt"
```

Both files are now removed in Files:

![img_070](./images/img_070.png)
![img_071](./images/img_071.png)

In the ```My Notes``` directory: 

![img_072](./images/img_072.png)

There is a ```script0.sh``` file:

![img_073](./images/img_073.png)

It can be removed using the full file path:

```
rm ~/Documents/"My Notes"/script0.sh
```

RRecall because there is a space in the fodler, that quotations have to be used:

![img_074](./images/img_074.png)
![img_075](./images/img_075.png)

## rmdir Remove Directory

The command ```rmdir``` can be used to remove an empty directory. 

![img_076](./images/img_076.png)

The empty directory ```MyNotes``` can be removed using:

```
rmdir MyNotes
```

![img_077](./images/img_077.png)
![img_078](./images/img_078.png)

The empty directory ```My Notes``` can also be removed. This has a space and will require quotations. The full file path can be selected:

```
rmdir ~/Documents/"My Notes"
```

![img_079](./images/img_079.png)
![img_080](./images/img_080.png)

## mkdir Make Directory

The command ```mkdir``` can be used to make a directory. A directory called ```Project0``` can be made in ```Documents``` using:

```
cd ~/Documents
mkdir Project0
```

![img_081](./images/img_081.png)
![img_082](./images/img_082.png)

Alternatively a directory ```Project1``` can be made by specifying the full file path:

```
mkdir ~/Documents/Project1
```

![img_083](./images/img_083.png)
![img_084](./images/img_084.png)

## mv Move

A file can be moved using the ```mv``` command. If directories are not selected, the file is renamed in the current directory:

![img_084](./images/img_084.png)

```script0.sh``` can be moved to ```testscript.sh``` using:

```
mv script0.sh testscript.sh
```

![img_085](./images/img_085.png)
![img_164](./images/img_164.png)

```testscript.sh``` can be moved to the directory ```Project0``` in ```Documents``` as ```script0.sh``` using:

```
mv testscript.sh ~/Documents/script0.sh
```

![img_086](./images/img_086.png)
![img_087](./images/img_087.png)
![img_088](./images/img_088.png)

## cp Copy

A file can be copied using the ```cp``` command:

![img_089](./images/img_089.png)

```script1.sh``` can be copied as ```script2.sh``` using:

```
cp script1.sh script2.sh
```

![img_090](./images/img_090.png)
![img_091](./images/img_091.png)

## zip

A zip file can be created using the ```zip``` command.

![img_091](./images/img_091.png)

The folder ```Project0```, ```script1.sh``` and ```script2.sh``` can be added to a zipped folder ```ZippedFiles.zip``` using:

```
zip ZippedFiles.zip Project0 script1.sh script2.sh
```

![img_092](./images/img_092.png)
![img_093](./images/img_093.png)
![img_094](./images/img_094.png)

## rm Remove a Directory with FIles

When ```rmdir``` is used on a the directory ```Project0``` an error displays informing us the directory is not empty:

```
rmdir Project0
```

![img_095](./images/img_095.png)

If ```rm``` is used on the directory an error message displays informing us that ```project0``` is a directory and not a file:

```
rm Project0
```

![img_096](./images/img_096.png)

The command ```rm``` can be used with optional arguments ```-rf``` to remove a directory containign files:

```
rm -rf Project0
```

![img_097](./images/img_097.png)

```f``` stands for force and ```r``` stands for recursive.

![img_098](./images/img_098.png)

The directory ```Project1``` can be seleted using ```rmdir``` because it is empty:

```
rmdir Project1
```

![img_099](./images/img_099.png)


## unzip

The ```unzip``` command can eb used to unzip a zipped folder:

![img_100](./images/img_100.png)

For example ```ZippedFile.zip``` can be unzipped using:

```
unzip ZippedFiles.zip
```

![img_101](./images/img_101.png)
![img_102](./images/img_102.png)

## man Manual

The ```man``` command can be used to get the manual for a command. ```rm``` was used earlier to delete a direcotry with files using the optional commands ```f``` and ```r```. Details about these are found when using:

```
man rm
```

![img_103](./images/img_103.png)

The manual can be scrolled through using the arrows or mouse wheel:

![img_104](./images/img_104.png)
![img_105](./images/img_105.png)
![img_106](./images/img_106.png)

And quit using ```q```.

![img_107](./images/img_107.png)

## info Information

The ```info``` command can also be used to get further information about a command in the rare scenario where the manual is not detailed enough:

```
info rm
```

![img_108](./images/img_108.png)
![img_109](./images/img_109.png)
![img_110](./images/img_110.png)

## / root

So far all file manipulations have been carried out in the Home ```~``` directory or subfolders within the Home directory where the user has access.

On Linux it is also possible to access the root directory or ```/```:

![img_111](./images/img_111.png)
![img_112](./images/img_112.png)

To change directory in the Terminal to root use:

```
cd /
```

![img_113](./images/img_113.png)

Notice if the ```touch``` command iss used to attempt to create a new file:

```
touch myfile.txt
```

that an error message displays saying Permission denied.

![img_114](./images/img_114.png)

## sudo Super User Do

sudo is an abbreviation for **s**uper **u**ser **do** and can be thought of as the Linux equivalent of Windows "run as administrator".

If the command above is used with the ```sudo``` prefix it will be ran as a super user:

```
sudo touch myfile.txt
```

An authentication prompt will display and the user will need to supply their password in order to proceed (this is the Linux equivalent of the User Account Control in Windows):

![img_115](./images/img_115.png)

Now the file is created:

![img_116](./images/img_116.png)

If the file is attempted to be removed using:

```
rm myfile.txt
```

another permission error will display:

![img_117](./images/img_117.png)

Once again this command needs to be prefixed with ```sudo```:

```
sudo rm myfile.txt
```

![img_118](./images/img_118.png)
![img_119](./images/img_119.png)

## chmod Change Modifications

If a file is right clicked and Properties are selected:

![img_137](./images/img_137.png)

Its Permissions can be explored:

![img_138](./images/img_138.png)

There are three User Groups; the User, the Group and other Users. All of these groups can have different permissions:

![img_139](./images/img_139.png)

For this reason the chmod command arguments becomes a bit complicated and it is useful to look up the manual using:

```
man chmod
```

![img_140](./images/img_140.png)
![img_141](./images/img_141.png)

Essentially the optional argument consists of one of the four characters:

|Command Line Argument|User|
|---|---|
|u|User|
|g|Group|
|o|Other|
|a|User, Group and Other|

Followed by an operator:

|Command Line Argument|Operator|
|---|---|
|+|Add Permission|
|-|Remove Permission|
|=|Make the Only Permission|

Followed by a Permission or multiple Permissions:

|Command Line Argument|Permission|
|---|---|
|r|Read|
|w|Write|
|x|Execute|

So to remove the write permissions for ```script1.sh``` for the user, the following command is used:

```
chmod u-w script1.sh
```

![img_142](./images/img_142.png)

The file has a padlock on it, indicating it is read only:

![img_143](./images/img_143.png)

If it is opened with ```nano```, ```nano``` informs the file is unwritable:

![img_144](./images/img_144.png)
![img_145](./images/img_145.png)

If it is opened with ```nano``` using ```sudo``` is is writable:

![img_146](./images/img_146.png)
![img_147](./images/img_147.png)

The user permissions to write can be added back using:

```
chmod u+w script1.sh
```

![img_148](./images/img_148.png)

Notice the padlock is now gone:

![img_149](./images/img_149.png)

## apt Advanced Package Tool

The Linux package manager is used to install Linux Software Updates and Operating System Updates and should not be confused with the Python package manager pip, conda or mamba which are used to install Python and Python packages.

Like Python, the Linux ecosystem is pretty vast and there are a multiude of Linux distributions and package managers. The package manager is normally used to install software updates and software applications.

Ubuntu is a Debian based distribution and uses the Advanced Package Tool ```apt``` found within Debian. It also uses ```snap``` for snap packages. One of the rationales for the two package managers is to seperate user installed programs from Operating System components. However other Linux distributions that are Ubuntu based such as Mint have moved to ```flatpak``` for this purpose. 

RedHat distros such as Fedora use the Dandified Yellowdog Updater Modified which has the abbreviation ```dnf```. 

Despite the differences in the package manager names, the syntax of the package managers is quite straight forward.

```apt``` will be used as an example:

```
apt
```

![img_120](./images/img_120.png)

There are five main commands ```list```, ```search```, ```install```, ```remove``` and ```upgrade```. The middle three commands require a package to be specified. The last 3 commands require super user permissions.

![img_121](./images/img_121.png)

Using:

```
apt list
```

will display all the installed packages including Operating System components:

![img_122](./images/img_122.png)
![img_123](./images/img_123.png)

The ```search``` command can be sued to search for a package such as ```gparted```:

```
apt search gparted
```

![img_124](./images/img_124.png)
![img_125](./images/img_125.png)

A software package can be installed using the ```install``` command prefixed with ```sudo```. ```gparted``` can be installed using:

```
sudo install gparted
```

![img_126](./images/img_126.png)

Details about the changes will outlined. Input ```y``` in order to proceed:

![img_127](./images/img_127.png)

Gparted will now be installed. To remove it use:

```
sudo apt remove gparted
```

![img_129](./images/img_129.png)

Details about the changes will outlined. Input ```y``` in order to proceed:

![img_130](./images/img_130.png)

Gparted is now uninstalled:

![img_131](./images/img_131.png)

To install Gparted and automatically accept the prompt to make changes use:

```
sudo apt -y install gparted
```
![img_132](./images/img_132.png)

To upgrade all installed packages use:

```
sudo apt upgrade
```

![img_133](./images/img_133.png)

Details about the changes will outlined. Input ```y``` in order to proceed:

![img_134](./images/img_134.png)

The software will be updated:

![img_135](./images/img_135.png)

## reboot

To reboot the computer, use:

```
sudo reboot
```

![img_136](./images/img_136.png)

## quit

To quit the Terminal, use:

```
quit
```

![img_163](./images/img_163.png)

## python3

The bash programming language has other programming constructs such as variables, conditional logic, for and while loops. These programming constructs are easier to learn in Python which the rest of these guides will focus on.

If the directory is changed to ```Documents```, a new Python Script file can be created by using the command ```touch```:

```
cd ~/Documents
touch script0.py
```

![img_151](./images/img_151.png)
![img_152](./images/img_152.png)

It can be edited in the ```nano``` Text Editor using:

```
nano script0.py
```

![img_153](./images/img_153.png)

The Python code:

```
print("Hello World")
```

can be added. ```Ctrl``` + ```x``` can be pressed to save the file:

![img_154](./images/img_154.png)

Input ```y``` to proceed with the save:

![img_155](./images/img_155.png)

Press ```↵``` to save the file using the existing file name:

![img_156](./images/img_156.png)

To launch the Python script file from Python use:

```
python3 script0.py
```

![img_157](./images/img_157.png)

The print statement displays as the Python script file is executed. 

![img_158](./images/img_158.png)

Python can also be ran using:

```
python3
```

![img_159](./images/img_159.png)

The prompt changes to ```>>>``` indicating that Python is running opposed to ```bash```.


![img_160](./images/img_160.png)

A Python function can be input:

```
print("Hello World!")
```

![img_161](./images/img_161.png)

To quit the Python interpreter use the Python function:

```
quit()
```

![img_162](./images/img_162.png)

To exit the Terminal use the bash command:

```
exit
```

![img_163](./images/img_163.png)

Notice the subtle difference between the last two commands because they are using two different programming languages Python and bash respectively.

Return to:

[Home Python Tutorials](https://github.com/PhilipYip1988/python-tutorials/blob/main/readme.md)
